name: Publish release

permissions: write-all

on:
  release:
    types: [published]

jobs:
  update_changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update CHANGELOG.md and config.json
        env:
          GITHUB_TOKEN: ${{ secrets.CR_PAT }}
          GH_TOKEN: ${{ secrets.CR_PAT }}
        run: |
          # Extract tag and release notes from the event payload
          TAG=$(jq -r '.release.tag_name' "$GITHUB_EVENT_PATH")
          RELEASE_NOTES=$(jq -r '.release.body' "$GITHUB_EVENT_PATH")
          
          # create new GIT branch
          git checkout -b "automated/update-changelog-${TAG}"

          # Prepend new release info to the existing CHANGELOG.md
          { echo -e "# Release ${TAG}\n\n${RELEASE_NOTES}\n\n"; cat CHANGELOG.md; } > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md

          # put new version into config.json
          jq --arg tag "$TAG" '.version = $tag' config.json > config.tmp
          mv config.tmp config.json

          # re-read the tag in this step
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git add config.json
          git commit -m "chore: update changelog for release ${TAG}"
          git push --set-upstream origin "automated/update-changelog-${TAG}"

          # create PR
          gh pr create \
            --title "chore: update changelog for release ${TAG}" \
            --body "This PR updates the changelog."

          # merge PR
          gh pr merge "automated/update-changelog-${TAG}" --merge
  
  publish_release:
    runs-on: ubuntu-latest
    env:
      TAG: ${{ github.event.release.tag_name }}
    strategy:
      fail-fast: false
      matrix:
        arch: [
            {
              docker_name: amd64,
              hass_name: amd64
            }, 
            {
              docker_name: arm64,
              hass_name: aarch64
            }
          ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # QEMU lets amd64 runners cross-build arm/arm64 layers
    - uses: docker/setup-qemu-action@v3          

    # Buildx = Dockerâ€™s multi-arch builder front-end
    - uses: docker/setup-buildx-action@v3        

    # Log in to GitHub Container Registry
    - uses: docker/login-action@v3               
      with:
        registry: ghcr.io
        username: sekertr
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build & push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        platforms: linux/${{ matrix.arch.docker_name }}
        build-args: |
          BUILD_VERSION=${{ env.TAG }}
          BUILD_ARCH=${{ matrix.arch.hass_name }}
        tags: |
          ghcr.io/sekertr/hass-n8n-${{ matrix.arch.hass_name }}:${{ env.TAG }}
          ghcr.io/sekertr/hass-n8n-${{ matrix.arch.hass_name }}:latest
